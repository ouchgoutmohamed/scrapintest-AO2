version: '3.8'

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: pmmp_postgres
    environment:
      POSTGRES_USER: pmmp_user
      POSTGRES_PASSWORD: pmmp_password
      POSTGRES_DB: pmmp_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pmmp_user -d pmmp_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pmmp_network

  # Scraper
  scraper:
    build: .
    container_name: pmmp_scraper
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./scraper:/app/scraper
    command: tail -f /dev/null  # Keep container running
    networks:
      - pmmp_network

  # API REST
  api:
    build: .
    container_name: pmmp_api
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - ./api:/app/api
      - ./logs:/app/logs
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - pmmp_network

  # Airflow (optionnel - décommentez pour activer)
  # airflow:
  #   image: apache/airflow:2.7.3-python3.11
  #   container_name: pmmp_airflow
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   env_file:
  #     - .env
  #   environment:
  #     AIRFLOW__CORE__EXECUTOR: LocalExecutor
  #     AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql://pmmp_user:pmmp_password@postgres:5432/airflow_db
  #     AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
  #   volumes:
  #     - ./airflow/dags:/opt/airflow/dags
  #     - ./airflow/logs:/opt/airflow/logs
  #     - ./airflow/plugins:/opt/airflow/plugins
  #   ports:
  #     - "8080:8080"
  #   command: standalone
  #   networks:
  #     - pmmp_network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: pmmp_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - pmmp_network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: pmmp_grafana
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    ports:
      - "3000:3000"
    networks:
      - pmmp_network

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  pmmp_network:
    driver: bridge
