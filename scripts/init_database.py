"""
Script d'initialisation de la base de donn√©es
Cr√©e les tables et charge les donn√©es de r√©f√©rence
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.connection import engine, check_connection, init_db
from database.models import Base
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def main():
    """Initialise la base de donn√©es"""
    logger.info("üöÄ Initialisation de la base de donn√©es PMMP...")
    
    # V√©rifier la connexion
    if not check_connection():
        logger.error("‚ùå Impossible de se connecter √† PostgreSQL")
        logger.error("V√©rifiez que PostgreSQL est d√©marr√© et que les param√®tres de connexion sont corrects")
        sys.exit(1)
    
    logger.info("‚úÖ Connexion PostgreSQL √©tablie")
    
    # Cr√©er les tables
    try:
        init_db()
        logger.info("‚úÖ Tables cr√©√©es avec succ√®s")
        
        # Afficher les tables cr√©√©es
        from sqlalchemy import inspect
        inspector = inspect(engine)
        tables = inspector.get_table_names()
        logger.info(f"üìä Tables disponibles: {', '.join(tables)}")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation des tables: {e}")
        sys.exit(1)
    
    logger.info("üéâ Initialisation termin√©e avec succ√®s!")


if __name__ == "__main__":
    main()
